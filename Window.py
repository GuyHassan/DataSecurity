#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 14, 2019 12:39:58 PM +0300  platform: Windows NT
import webbrowser

import sys
import tkinter.scrolledtext as ScrolledText

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import Window_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = data_screen(root)
    Window_support.init(root, top)
    root.mainloop()

w = None
def create_data_screen(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = data_screen (w)
    Window_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_data_screen():
    global w
    w.destroy()
    w = None

################## url Address ################
urlAddress=None
class data_screen:
    ####---------------------------------------- START OF GUI INIT ---------------------------------------####

    def __init__(self, top=None):
        global urlAddress
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("951x650+377+0")
        top.title("Data Mining")
        top.configure(background="#9c9c9e")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.root_label = tk.Label(top)
        self.root_label.place(relx=0.021, rely=0.024, height=46, width=112)
        self.root_label.configure(activebackground="#a5a5a8")
        self.root_label.configure(activeforeground="#a5a5a8")
        self.root_label.configure(background="#9c9c9e")
        self.root_label.configure(disabledforeground="#a3a3a3")
        self.root_label.configure(font="-family {Yu Gothic UI Semibold} -size 9 -weight bold")
        self.root_label.configure(foreground="#000000")
        self.root_label.configure(highlightbackground="#d9d9d9")
        self.root_label.configure(highlightcolor="black")
        self.root_label.configure(text='''Enter Root''')

        self.root_text = tk.Text(top)
        self.root_text.place(relx=0.158, rely=0.036, relheight=0.04
                , relwidth=0.604)
        self.root_text.configure(background="white")
        self.root_text.configure(font="-family {Yu Gothic UI Semibold} -size 9 -weight bold")
        self.root_text.configure(foreground="black")
        self.root_text.configure(highlightbackground="#d9d9d9")
        self.root_text.configure(highlightcolor="black")
        self.root_text.configure(inactiveselectbackground="#000000")
        self.root_text.configure(insertbackground="black")
        self.root_text.configure(selectbackground="#c4c4c4")
        self.root_text.configure(selectforeground="black")
        self.root_text.configure(width=574)
        self.root_text.configure(wrap="word")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.root_text, tooltip_font, '''enter your root''', delay=0.5)

        self.search_button = tk.Button(top)
        self.search_button.place(relx=0.831, rely=0.036, height=33, width=146)
        self.search_button.configure(activebackground="#3e3eed")
        self.search_button.configure(activeforeground="white")
        self.search_button.configure(activeforeground="#000000")
        self.search_button.configure(background="#e8e7e6")
        self.search_button.configure(command=self.import_url)
        self.search_button.configure(disabledforeground="#a3a3a3")
        self.search_button.configure(font="-family {Segoe UI Emoji} -size 9")
        self.search_button.configure(foreground="#000000")
        self.search_button.configure(highlightbackground="#d9d9d9")
        self.search_button.configure(highlightcolor="black")
        self.search_button.configure(pady="0")
        self.search_button.configure(text='''Search''')
        self.search_button.configure(width=146)
        tooltip_font = "TkDefaultFont"
        ToolTip(self.search_button, tooltip_font, '''press to Search''', delay=0.5)

        self.export_to_txt_button = tk.Button(top)
        self.export_to_txt_button.place(relx=0.852, rely=0.881, height=73
                                        , width=106)
        self.export_to_txt_button.configure(activebackground="#ececec")
        self.export_to_txt_button.configure(activeforeground="#000000")
        self.export_to_txt_button.configure(background="#d9d9d9")
        self.export_to_txt_button.configure(command=Window_support.export_to_txt)
        self.export_to_txt_button.configure(disabledforeground="#a3a3a3")
        self.export_to_txt_button.configure(foreground="#000000")
        self.export_to_txt_button.configure(highlightbackground="#d9d9d9")
        self.export_to_txt_button.configure(highlightcolor="#000000")
        self.export_to_txt_button.configure(pady="0")
        self.export_to_txt_button.configure(text='''export to TXT''')
        self.export_to_txt_button.configure(width=106)
        tooltip_font = "TkDefaultFont"
        ToolTip(self.export_to_txt_button, tooltip_font, '''press to export the table to TXT file''', delay=0.5)

        self.filter_button = tk.Button(top)
        self.filter_button.place(relx=0.862, rely=0.155, height=73, width=96)
        self.filter_button.configure(activebackground="#ececec")
        self.filter_button.configure(activeforeground="#000000")
        self.filter_button.configure(background="#d9d9d9")
        self.filter_button.configure(disabledforeground="#a3a3a3")
        self.filter_button.configure(foreground="#000000")
        self.filter_button.configure(highlightbackground="#d9d9d9")
        self.filter_button.configure(highlightcolor="black")
        self.filter_button.configure(pady="0")
        self.filter_button.configure(command=self.search_by_model)
        self.filter_button.configure(text='''Find Specific\n Model''')

        self.filter_model_text = tk.Text(top)
        self.filter_model_text.place(relx=0.831, rely=0.286, relheight=0.04
                , relwidth=0.151)
        self.filter_model_text.configure(background="white")
        self.filter_model_text.configure(font="TkTextFont")
        self.filter_model_text.configure(foreground="black")
        self.filter_model_text.configure(highlightbackground="#d9d9d9")
        self.filter_model_text.configure(highlightcolor="black")
        self.filter_model_text.configure(insertbackground="black")
        self.filter_model_text.configure(selectbackground="#c4c4c4")
        self.filter_model_text.configure(selectforeground="black")
        self.filter_model_text.configure(width=144)
        self.filter_model_text.configure(wrap="word")
        tooltip_font = "TkDefaultFont"
        ToolTip(self.filter_model_text, tooltip_font, '''enter specific model to filter the result''', delay=0.5)

        self.reset_button = tk.Button(top)
        self.reset_button.place(relx=0.032, rely=0.929, height=33, width=186)
        self.reset_button.configure(activebackground="#ececec")
        self.reset_button.configure(activeforeground="#000000")
        self.reset_button.configure(background="#d9d9d9")
        self.reset_button.configure(disabledforeground="#a3a3a3")
        self.reset_button.configure(foreground="#000000")
        self.reset_button.configure(highlightbackground="#d9d9d9")
        self.reset_button.configure(highlightcolor="black")
        self.reset_button.configure(pady="0")
        self.reset_button.configure(command=self.delete_Scrolledtext)
        self.reset_button.configure(text='''Reset''')
        tooltip_font = "TkDefaultFont"
        ToolTip(self.reset_button, tooltip_font, '''press to reset the table''', delay=0.5)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Scrolledtext1 = ScrolledText(top)
        self.Scrolledtext1.place(relx=0.032, rely=0.107, relheight=0.802
                , relwidth=0.783)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(state="disabled")
        self.Scrolledtext1.configure(foreground="black")
        self.Scrolledtext1.configure(highlightbackground="#d9d9d9")
        self.Scrolledtext1.configure(highlightcolor="black")
        self.Scrolledtext1.configure(insertbackground="black")
        self.Scrolledtext1.configure(insertborderwidth="50")
        self.Scrolledtext1.configure(selectbackground="#c4c4c4")
        self.Scrolledtext1.configure(selectforeground="black")
        self.Scrolledtext1.configure(width=200)
        self.Scrolledtext1.configure(wrap="none")

    ####---------------------------------------- END OF GUI INIT ---------------------------------------####


    #****************    function for search button    ********************#

    def import_url(self):
        '''
        GUI method that import all table from specific url
        :return: None
        '''
        self.Scrolledtext1.configure(state="normal")
        self.Scrolledtext1.delete("1.0", "end-1c")
        urlAddress = self.root_text.get("1.0","end-1c")
        self.Scrolledtext1.insert(tk.INSERT,Window_support.search_window(urlAddress,'all'))
        self.Scrolledtext1.configure(state="disabled")

    #****************    END function for search button    ********************#

    #****************    START function for filter button    ********************#

    def search_by_model(self):
        '''
        function that do the same as import_url but, filter by specific model and return table
        :return:None
        '''
        self.Scrolledtext1.configure(state="normal")
        self.Scrolledtext1.delete("1.0", "end-1c")
        urlAddress = self.root_text.get("1.0", "end-1c")
        model=self.filter_model_text.get("1.0",'end-1c')
        self.Scrolledtext1.insert(tk.INSERT, Window_support.search_window(urlAddress, model))
        self.Scrolledtext1.configure(state="disabled")

    #****************    END function for filter button    ********************#

    #****************    START function for reset button    ********************#
    def delete_Scrolledtext(self):
        '''
        functio that delete the scrolled_text when we want a new table
        :return: None
        '''
        self.Scrolledtext1.configure(state="normal")
        self.Scrolledtext1.delete("1.0","end-1c")
        self.root_text.delete("1.0","end-1c")
        self.Scrolledtext1.configure(state="disabled")

    #****************    END function for reset button    ********************#


#   ======================================================
#   Modified by Rozen to remove Tkinter import statements and to receive
#   the font as an argument.
#   ======================================================
#   Found the original code at:
#   http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
#   ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=1, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in miliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





